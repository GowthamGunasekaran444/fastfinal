import React, { forwardRef, useMemo } from "react";
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip as ReTooltip,
  ResponsiveContainer,
} from "recharts";
import { Table, Tooltip } from "antd";

export type ChartType = "bar" | "line" | "table";

interface ChartProps {
  type: ChartType;
  data: any[];
}

const Chart = forwardRef<HTMLDivElement, ChartProps>(({ type, data }, ref) => {
  // Dynamically generate AntD Table columns
  const tableColumns = useMemo(() => {
    if (type !== "table" || !data || data.length === 0) return [];

    const firstRow = data[0];
    return Object.keys(firstRow).map((key) => ({
      title: key,
      dataIndex: key,
      key,
      width: 100,
      ellipsis: true,
      render: (text: string) => (
        <Tooltip title={text}>
          <span
            style={{
              overflow: "hidden",
              textOverflow: "ellipsis",
              whiteSpace: "nowrap",
              display: "inline-block",
              maxWidth: "100%",
            }}
          >
            {text}
          </span>
        </Tooltip>
      ),
    }));
  }, [data, type]);

  return (
    <div ref={ref} style={{ width: "100%", height: "100%" }}>
      <ResponsiveContainer>
        {type === "bar" && (
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <ReTooltip />
            <Bar dataKey="value" fill="#1890ff" />
          </BarChart>
        )}

        {type === "line" && (
          <LineChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <ReTooltip />
            <Line type="monotone" dataKey="value" stroke="#ff4d4f" />
          </LineChart>
        )}

        {type === "table" && (
          <Table
            columns={tableColumns}
            dataSource={data.map((row, i) => ({ key: i + 1, ...row }))}
            pagination={{ pageSize: 5 }}
            bordered
            size="small"
          />
        )}
      </ResponsiveContainer>
    </div>
  );
});

Chart.displayName = "Chart";
export default Chart;



import React, {
  useState,
  useRef,
  useImperativeHandle,
  forwardRef,
  Suspense,
  lazy,
  useCallback,
  memo,
} from "react";
import { Button } from "antd";
import type { ChartType } from "./Chart";

const Chart = lazy(() => import("./Chart"));

export interface ChartContainerRef {
  getChartRef: () => HTMLDivElement | null;
  exportChartToBase64: () => string | null;
}

interface ChartContainerProps {
  chartData?: any[];
  tableData?: any[];
}

const ChartContainer = forwardRef<ChartContainerRef, ChartContainerProps>(
  ({ chartData, tableData }, ref) => {
    const [view, setView] = useState<ChartType>(
      chartData ? "bar" : tableData ? "table" : "bar"
    );
    const chartRef = useRef<HTMLDivElement | null>(null);

    // Handle ref export
    useImperativeHandle(ref, () => ({
      getChartRef: () => chartRef.current,
      exportChartToBase64: () => {
        if (!chartRef.current) return null;
        const svg = chartRef.current.querySelector("svg");
        if (!svg) return null;

        const serializer = new XMLSerializer();
        const svgString = serializer.serializeToString(svg);
        return "data:image/svg+xml;base64," + btoa(svgString);
      },
    }));

    // Build available views based on inputs
    const availableViews: ChartType[] =
      chartData && tableData
        ? ["bar", "line", "table"]
        : chartData
        ? ["bar", "line"]
        : tableData
        ? ["table"]
        : ["bar", "line", "table"]; // fallback: all for validation

    const renderChart = useCallback(() => {
      if (view === "table" && tableData) {
        return <Chart type="table" data={tableData} ref={chartRef} />;
      }
      if ((view === "bar" || view === "line") && chartData) {
        return <Chart type={view} data={chartData} ref={chartRef} />;
      }
      return <div>No data provided</div>;
    }, [view, chartData, tableData]);

    return (
      <div style={{ width: 700, height: 500, border: "1px solid #ddd", padding: 16 }}>
        <div style={{ marginBottom: 16, textAlign: "center" }}>
          {availableViews.includes("bar") && (
            <Button onClick={() => setView("bar")}>Bar Chart</Button>
          )}
          {availableViews.includes("line") && (
            <Button onClick={() => setView("line")} style={{ margin: "0 8px" }}>
              Line Chart
            </Button>
          )}
          {availableViews.includes("table") && (
            <Button onClick={() => setView("table")}>Table</Button>
          )}
        </div>

        <Suspense fallback={<div>Loading...</div>}>{renderChart()}</Suspense>
      </div>
    );
  }
);

ChartContainer.displayName = "ChartContainer";
export default memo(ChartContainer);
