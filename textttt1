import React, {
  useState,
  useRef,
  useImperativeHandle,
  forwardRef,
  Suspense,
  lazy,
  useCallback,
  useMemo,
  memo,
} from "react";
import type { ChartType } from "./Chart";

const Chart = lazy(() => import("./Chart"));

export interface ChartContainerRef {
  getChartRef: () => HTMLDivElement | null;
  exportChartToBase64: () => string | null;
}

interface ChartContainerProps {
  chartData?: any[];
  tableData?: any[];
}

/** ---------------- Styles ---------------- */
const containerStyle: React.CSSProperties = {
  width: 700,
  height: 500,
  border: "1px solid #ddd",
  padding: 16,
};

const groupWrapperStyle: React.CSSProperties = {
  display: "flex",
  justifyContent: "center",
  marginBottom: 16,
  width: 120,
  height: 20,
  borderRadius: 6,
  overflow: "hidden",
  border: "1px solid #ccc",
};

const buttonBaseStyle: React.CSSProperties = {
  flex: "0 0 40px",
  height: "100%",
  border: "none",
  outline: "none",
  cursor: "pointer",
  fontSize: 10,
  transition: "all 0.2s ease",
};

/** ---------------- Button Group ---------------- */
interface ButtonGroupProps {
  options: ChartType[];
  value: ChartType;
  onChange: (v: ChartType) => void;
}

const ButtonGroup = memo(({ options, value, onChange }: ButtonGroupProps) => (
  <div style={groupWrapperStyle}>
    {options.map((v) => {
      const isActive = value === v;
      return (
        <button
          key={v}
          onClick={() => onChange(v)}
          style={{
            ...buttonBaseStyle,
            backgroundColor: isActive ? "#1890ff" : "#fff",
            color: isActive ? "#fff" : "#333",
          }}
        >
          {v === "bar" ? "Bar" : v === "line" ? "Line" : "Table"}
        </button>
      );
    })}
  </div>
));
ButtonGroup.displayName = "ButtonGroup";

/** ---------------- Chart Renderer ---------------- */
interface ChartRendererProps {
  view: ChartType;
  chartData?: any[];
  tableData?: any[];
  chartRef: React.RefObject<HTMLDivElement>;
}

const ChartRenderer = memo(({ view, chartData, tableData, chartRef }: ChartRendererProps) => {
  if (view === "table" && tableData) {
    return (
      <Suspense fallback={<div>Loading table...</div>}>
        <Chart type="table" data={tableData} ref={chartRef} />
      </Suspense>
    );
  }

  if ((view === "bar" || view === "line") && chartData) {
    return (
      <Suspense fallback={<div>Loading chart...</div>}>
        <Chart type={view} data={chartData} ref={chartRef} />
      </Suspense>
    );
  }

  return <div>No data provided</div>;
});
ChartRenderer.displayName = "ChartRenderer";

/** ---------------- Chart Container ---------------- */
const ChartContainer = forwardRef<ChartContainerRef, ChartContainerProps>(
  ({ chartData, tableData }, ref) => {
    const [view, setView] = useState<ChartType>(
      chartData ? "bar" : tableData ? "table" : "bar"
    );
    const chartRef = useRef<HTMLDivElement | null>(null);

    useImperativeHandle(ref, () => ({
      getChartRef: () => chartRef.current,
      exportChartToBase64: () => {
        if (!chartRef.current) return null;
        const svg = chartRef.current.querySelector("svg");
        if (!svg) return null;

        const serializer = new XMLSerializer();
        const svgString = serializer.serializeToString(svg);
        return "data:image/svg+xml;base64," + btoa(svgString);
      },
    }));

    /** Available views based on input */
    const availableViews = useMemo<ChartType[]>(() => {
      if (chartData && tableData) return ["bar", "line", "table"];
      if (chartData) return ["bar", "line"];
      if (tableData) return ["table"];
      return ["bar", "line", "table"]; // validation fallback
    }, [chartData, tableData]);

    /** View handler */
    const handleSetView = useCallback((v: ChartType) => setView(v), []);

    return (
      <div style={containerStyle}>
        <ButtonGroup options={availableViews} value={view} onChange={handleSetView} />
        <ChartRenderer view={view} chartData={chartData} tableData={tableData} chartRef={chartRef} />
      </div>
    );
  }
);

ChartContainer.displayName = "ChartContainer";
export default memo(ChartContainer);
