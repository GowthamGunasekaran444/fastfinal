from sqlalchemy import Column, Integer, String, DateTime, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

Base = declarative_base()

class InteractionCache(Base):
    __tablename__ = 'interaction_cache'

    id = Column(Integer, primary_key=True)
    interaction_id = Column(String, nullable=False)
    user_id = Column(String, nullable=False)
    session_id = Column(String, nullable=False)
    conversation = Column(String, nullable=False)  # or JSON if needed
    created_time = Column(DateTime, default=datetime.utcnow, nullable=False)


# SQLite for cache
sqlite_engine = create_engine("sqlite:///interaction_cache.db", echo=False)
SQLiteSessionLocal = sessionmaker(bind=sqlite_engine)

# SQL Server session (assume already exists)
# sql_server_session = Your existing SQL Server session
# SQLServerInteraction = Your existing SQL Server Interaction model

Base.metadata.create_all(bind=sqlite_engine)




def sync_from_sqlserver(sql_server_session, sqlite_session, session_id: str):
    """
    Fetch last 5 interactions from SQL Server by session_id.
    Insert into SQLite cache if they don't exist.
    """
    # Assume SQLServerInteraction is your existing model
    from SQLServerModels import Interaction as SQLServerInteraction  # Adjust import

    results = (
        sql_server_session.query(SQLServerInteraction)
        .filter(SQLServerInteraction.session_id == session_id)
        .order_by(SQLServerInteraction.created_time.desc())
        .limit(5)
        .all()
    )

    for interaction in results:
        exists = sqlite_session.query(InteractionCache).filter(
            InteractionCache.interaction_id == interaction.interaction_id
        ).first()

        if not exists:
            cache_entry = InteractionCache(
                interaction_id=interaction.interaction_id,
                user_id=interaction.user_id,
                session_id=interaction.session_id,
                conversation=str(interaction.conversation),  # Adjust field access
                created_time=interaction.created_time
            )
            sqlite_session.add(cache_entry)

    sqlite_session.commit()






def insert_into_cache(sqlite_session, interaction_id: str, user_id: str, session_id: str, conversation: str):
    """
    Insert new interaction into SQLite cache.
    If more than 5 for session_id, remove the oldest.
    """
    new_entry = InteractionCache(
        interaction_id=interaction_id,
        user_id=user_id,
        session_id=session_id,
        conversation=conversation,
        created_time=datetime.utcnow()
    )
    sqlite_session.add(new_entry)
    sqlite_session.commit()

    # Keep only the latest 5 interactions per session_id
    cached_interactions = sqlite_session.query(InteractionCache).filter(
        InteractionCache.session_id == session_id
    ).order_by(InteractionCache.created_time.desc()).all()

    if len(cached_interactions) > 5:
        # Delete the oldest ones beyond the 5th
        to_delete = cached_interactions[5:]
        for old in to_delete:
            sqlite_session.delete(old)
        sqlite_session.commit()





def chat_with_gpt_and_update_cache(
    sql_server_session,
    sqlite_session,
    session_id: str,
    user_message: str,
    api_endpoint: str
):
    """
    Full flow:
    1. Sync last 5 from SQL Server â†’ SQLite (if needed)
    2. Call chat API
    3. Save response to SQL Server
    4. Insert into SQLite cache (with trim)
    """
    # Step 1: Sync existing interactions from SQL Server to SQLite cache
    sync_from_sqlserver(sql_server_session, sqlite_session, session_id)

    # Step 2: Call your chat API (placeholder)
    api_response = call_chat_api(api_endpoint, user_message)  # Implement this
    reply_text = api_response.get("response")

    # Assume you have a new interaction_id, user_id, etc.
    from uuid import uuid4
    new_interaction_id = str(uuid4())
    user_id = "user_123"  # Should come from context

    # Step 3: Save to SQL Server (your existing logic)
    from SQLServerModels import Interaction as SQLServerInteraction
    new_sqlserver_interaction = SQLServerInteraction(
        interaction_id=new_interaction_id,
        user_id=user_id,
        session_id=session_id,
        conversation=reply_text,
        created_time=datetime.utcnow()
    )
    sql_server_session.add(new_sqlserver_interaction)
    sql_server_session.commit()

    # Step 4: Insert into SQLite cache (auto-trimmed)
    insert_into_cache(
        sqlite_session=sqlite_session,
        interaction_id=new_interaction_id,
        user_id=user_id,
        session_id=session_id,
        conversation=reply_text
    )

    return reply_text


