DATABRICKS_HOST = os.getenv("DATABRICKS_HOST")
DATABRICKS_TOKEN = os.getenv("DATABRICKS_TOKEN")
MLFLOW_TRACKING_URI = os.getenv("MLFLOW_TRACKING_URI", "databricks")
MLFLOW_REGISTRY_URI = os.getenv("MLFLOW_REGISTRY_URI", "databricks-uc")
EXPERIMENT_NAME = "/Users/you@example.com/llm-feedback-experiment"

if not DATABRICKS_HOST or not DATABRICKS_TOKEN:
    raise RuntimeError("DATABRICKS_HOST and DATABRICKS_TOKEN must be set!")

mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
mlflow.set_registry_uri(MLFLOW_REGISTRY_URI)
mlflow.set_experiment(EXPERIMENT_NAME)



model/table.py â†’ User Table
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import declarative_base
from passlib.context import CryptContext

Base = declarative_base()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    password = Column(String, nullable=False)

    @staticmethod
    def hash_password(password: str) -> str:
        return pwd_context.hash(password)

    @staticmethod
    def verify_password(password: str, hashed: str) -> bool:
        return pwd_context.verify(password, hashed)

schema/schema.py â†’ Pydantic Schemas
from pydantic import BaseModel, EmailStr

class UserLogin(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"

class RefreshTokenRequest(BaseModel):
    token: str

repository/repository.py â†’ DB Access
from sqlalchemy.orm import Session
from source.main.login.model.table import User

def get_user_by_username(db: Session, username: str):
    return db.query(User).filter(User.username == username).first()

def get_user_by_email(db: Session, email: str):
    return db.query(User).filter(User.email == email).first()

utils/auth.py â†’ JWT Functions
from datetime import datetime, timedelta
from jose import jwt, JWTError

SECRET_KEY = "SECRET_KEY_CHANGE_ME"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 15

def create_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def verify_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload  # contains username + email
    except JWTError:
        return None

controller/controller.py â†’ Router
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from source.main.login.schema.schema import UserLogin, Token, RefreshTokenRequest
from source.main.login.repository.repository import get_user_by_username, get_user_by_email
from source.main.login.model.table import User
from source.main.utils.auth import create_token, verify_token
from source.main.database import get_db  # <-- assuming you already have this

router = APIRouter(prefix="/auth", tags=["auth"])

@router.post("/login", response_model=Token)
def login(payload: UserLogin, db: Session = Depends(get_db)):
    user = get_user_by_username(db, payload.username)
    if not user or not User.verify_password(payload.password, user.password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")

    token = create_token({"sub": user.username, "email": user.email})
    return {"access_token": token}

@router.post("/refresh", response_model=Token)
def refresh_token(req: RefreshTokenRequest, db: Session = Depends(get_db)):
    payload = verify_token(req.token)
    if not payload:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid or expired token")

    email = payload.get("email")
    user = get_user_by_email(db, email)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")

    new_token = create_token({"sub": user.username, "email": user.email})
    return {"access_token": new_token}

ðŸ”‘ How to Use verify_token in Other Routers
Example in another API router:

python
Copy
Edit
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from source.main.utils.auth import verify_token

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

def get_current_user(token: str = Depends(oauth2_scheme)):
    payload = verify_token(token)
    if not payload:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid or expired token")
    return payload  # gives {"sub": username, "email": email}
Then in your API:

python
Copy
Edit
@router.get("/secure-data")
def secure_data(current_user=Depends(get_current_user)):
    return {"message": f"Hello {current_user['sub']} ({current_user['email']})"}
