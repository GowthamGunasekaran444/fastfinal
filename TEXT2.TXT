// utils/dateAndMarkdown.ts

export type DateRange = {
  startDate: string; // formatted as MM-DD-YYYY
  endDate: string;
};

/**
 * Helper to format Date into MM-DD-YYYY
 */
function formatDate(date: Date): string {
  const mm = String(date.getMonth() + 1).padStart(2, "0");
  const dd = String(date.getDate()).padStart(2, "0");
  const yyyy = date.getFullYear();
  return `${mm}-${dd}-${yyyy}`;
}

/**
 * Get a date range based on keyword like "last month", "last 3 months", etc.
 */
export function getDateRange(range: string): DateRange {
  const today = new Date();
  const endDate = new Date(today); // copy

  const startDate = new Date(today);

  switch (range.toLowerCase()) {
    case "last month":
      startDate.setMonth(startDate.getMonth() - 1);
      break;
    case "last 3 months":
      startDate.setMonth(startDate.getMonth() - 3);
      break;
    case "last 6 months":
      startDate.setMonth(startDate.getMonth() - 6);
      break;
    case "last year":
      startDate.setFullYear(startDate.getFullYear() - 1);
      break;
    default:
      throw new Error(`Invalid range: ${range}`);
  }

  return { startDate: formatDate(startDate), endDate: formatDate(endDate) };
}

/**
 * Convert a markdown table string into JSON array of objects.
 */
export function markdownTableToJSON(md: string): Record<string, string>[] {
  const lines = md.trim().split("\n");

  if (lines.length < 2) {
    throw new Error("Invalid markdown table: missing header or rows");
  }

  // Extract header row
  const headers = lines[0]
    .split("|")
    .map(h => h.trim())
    .filter(Boolean);

  // Skip the separator row (line[1]) and process data rows
  const rows = lines.slice(2);

  const data = rows.map(line => {
    const cells = line
      .split("|")
      .map(c => c.trim())
      .filter(Boolean);

    const row: Record<string, string> = {};
    headers.forEach((h, i) => {
      row[h] = cells[i] ?? "";
    });

    return row;
  });

  return data;
}
