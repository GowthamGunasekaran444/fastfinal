from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import os
import mlflow
from mlflow.tracking import MlflowClient

# =============================
# 1. Set up connection to Databricks
# =============================

# Make sure these are stored in environment variables for security
DATABRICKS_HOST = os.getenv("DATABRICKS_HOST", "https://adb-1234567890123456.9.azuredatabricks.net")
DATABRICKS_TOKEN = os.getenv("DATABRICKS_TOKEN", "your-token-here")
EXPERIMENT_ID = os.getenv("DATABRICKS_EXPERIMENT_ID", "1234567890123456")

mlflow.set_tracking_uri(f"{DATABRICKS_HOST}")
os.environ["DATABRICKS_HOST"] = DATABRICKS_HOST
os.environ["DATABRICKS_TOKEN"] = DATABRICKS_TOKEN

client = MlflowClient()

# =============================
# 2. FastAPI App
# =============================
app = FastAPI()

class TraceRequest(BaseModel):
    trace_ids: List[str]

@app.post("/get-trace-details/")
def get_trace_details(request: TraceRequest):
    try:
        # Build single filter string with OR conditions
        filter_conditions = " OR ".join([f"tags.trace_id = '{tid}'" for tid in request.trace_ids])

        runs = client.search_runs(
            experiment_ids=[EXPERIMENT_ID],
            filter_string=filter_conditions,
            max_results=1000
        )

        results = []
        for run in runs:
            trace_id = run.data.tags.get("trace_id")
            details = {
                "trace_id": trace_id,
                "run_id": run.info.run_id,
                "message": run.data.params.get("message"),
                "conversation": run.data.params.get("conversation"),
                "feedback": run.data.params.get("feedback"),
                "metrics": run.data.metrics,
                "tags": run.data.tags
            }
            results.append(details)

        return {"status": "success", "data": results}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
