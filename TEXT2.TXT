export type DateRange = { startDate: string; endDate: string };

function formatDate(date: Date): string {
  const mm: string = String(date.getMonth() + 1).padStart(2, "0");
  const dd: string = String(date.getDate()).padStart(2, "0");
  const yyyy: number = date.getFullYear();
  return `${mm}-${dd}-${yyyy}`;
}

export function getDateRange(range: string): DateRange {
  const today: Date = new Date();
  const endDate: Date = new Date(today);
  const startDate: Date = new Date(today);
  switch (range.trim().toLowerCase()) {
    case "last month":
      startDate.setMonth(startDate.getMonth() - 1);
      break;
    case "last 3 months":
      startDate.setMonth(startDate.getMonth() - 3);
      break;
    case "last 6 months":
      startDate.setMonth(startDate.getMonth() - 6);
      break;
    case "last year":
      startDate.setFullYear(startDate.getFullYear() - 1);
      break;
    default:
      throw new Error(`Invalid range: ${range}`);
  }
  return { startDate: formatDate(startDate), endDate: formatDate(endDate) };
}

export function markdownTableToJSON(md: string): Record<string, string>[] {
  const lines: string[] = md.trim().split("\n");
  if (lines.length < 2) throw new Error("Invalid markdown table");
  const headers: string[] = lines[0].split("|").map((h: string) => h.trim()).filter(Boolean);
  const rows: string[] = lines.slice(2);
  return rows.map((line: string) => {
    const cells: string[] = line.split("|").map((c: string) => c.trim()).filter(Boolean);
    const row: Record<string, string> = {};
    headers.forEach((h: string, i: number) => (row[h] = cells[i] ?? ""));
    return row;
  });
}

export function markdownTableToCSV(md: string): string {
  const lines: string[] = md.trim().split("\n");
  if (lines.length < 2) throw new Error("Invalid markdown table");
  const headers: string[] = lines[0].split("|").map((h: string) => h.trim()).filter(Boolean);
  const rows: string[] = lines.slice(2);
  const csvLines: string[] = [headers.join(",")];
  rows.forEach((line: string) => {
    const cells: string[] = line.split("|").map((c: string) => c.trim()).filter(Boolean);
    csvLines.push(cells.join(","));
  });
  return csvLines.join("\n");
}

export function downloadMarkdownAsCSV(md: string, filename: string = "data.csv"): void {
  const csvContent: string = markdownTableToCSV(md);
  const blob: Blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url: string = URL.createObjectURL(blob);
  const a: HTMLAnchorElement = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
