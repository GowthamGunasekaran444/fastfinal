// hooks/useExport.js
import { useCallback } from "react";

export function useExport() {
  // ðŸ“Œ Helper: Convert base64 to Blob
  const base64ToBlob = (base64, type = "application/octet-stream") => {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    return new Blob([byteArray], { type });
  };

  // ðŸ“Œ Export to PDF
  const exportToPDF = useCallback(
    async ({ text, base64, filename = "export.pdf" }) => {
      const { saveAs } = await import("file-saver");

      if (base64) {
        // Use Base64 if available
        const blob = base64ToBlob(base64, "application/pdf");
        saveAs(blob, filename);
        return;
      }

      if (text) {
        // Otherwise generate PDF from text
        const { PDFDocument } = await import("pdf-lib");
        const pdfDoc = await PDFDocument.create();
        const page = pdfDoc.addPage([600, 400]);
        page.drawText(text, { x: 50, y: 350, size: 16 });
        const pdfBytes = await pdfDoc.save();
        saveAs(new Blob([pdfBytes]), filename);
      }
    },
    []
  );

  // ðŸ“Œ Export to Word
  const exportToWord = useCallback(
    async ({ text, base64, filename = "export.docx" }) => {
      const { saveAs } = await import("file-saver");

      if (base64) {
        // Use Base64 if available
        const blob = base64ToBlob(
          base64,
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        );
        saveAs(blob, filename);
        return;
      }

      if (text) {
        // Otherwise generate Word from text
        const docx = await import("docx");
        const { Document, Packer, Paragraph } = docx;

        const doc = new Document({
          sections: [
            {
              properties: {},
              children: [new Paragraph(text)],
            },
          ],
        });

        const blob = await Packer.toBlob(doc);
        saveAs(blob, filename);
      }
    },
    []
  );

  return { exportToPDF, exportToWord };
}
