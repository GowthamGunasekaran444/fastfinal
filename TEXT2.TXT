import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";

// Define the shape of a Session object
export interface Session {
  session_id: string;
  session_name: string;
  user_id: string;
}

// Slice state type
interface SearchModalState {
  query: string;
  results: Session[];
  loading: boolean;
  error: string | null;
}

// Initial state
const initialState: SearchModalState = {
  query: "",
  results: [],
  loading: false,
  error: null,
};

// Async thunk
export const searchSessions = createAsyncThunk<
  Session[], // Return type
  string,    // Argument type (query string)
  { rejectValue: string }
>("searchModal/searchSessions", async (query, { rejectWithValue }) => {
  try {
    const response = await axios.post<Session[]>("/sessions/search", {
      session_name: query,
    });
    return response.data;
  } catch (error: any) {
    return rejectWithValue(error.response?.data || "API error");
  }
});

const searchModalSlice = createSlice({
  name: "searchModal",
  initialState,
  reducers: {
    setQuery(state, action: PayloadAction<string>) {
      state.query = action.payload;
    },
    clearResults(state) {
      state.results = [];
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(searchSessions.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(searchSessions.fulfilled, (state, action: PayloadAction<Session[]>) => {
        state.loading = false;
        state.results = action.payload;
      })
      .addCase(searchSessions.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

export const { setQuery, clearResults } = searchModalSlice.actions;
export default searchModalSlice.reducer;



  const dispatch = useDispatch<AppDispatch>();
  const { query, results, loading, error } = useSelector(
    (state: RootState) => state.searchModal
  );

  const [localInput, setLocalInput] = useState<string>(query);

  // Debounce input
  useEffect(() => {
    const handler = setTimeout(() => {
      if (localInput.trim()) {
        dispatch(setQuery(localInput));
        dispatch(searchSessions(localInput));
      } else {
        dispatch(clearResults());
      }
    }, 500);

    return () => {
      clearTimeout(handler);
    };
  }, [localInput, dispatch]);

