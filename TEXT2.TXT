import React from "react";
import { saveAs } from "file-saver";

type ExportType = "pdf" | "word";

interface ExportOptions {
  text: string;
  images?: string[];
  type: ExportType;
  fileName?: string;
}

export const exportFileService = async ({
  text,
  images = [],
  type,
  fileName = "export",
}: ExportOptions) => {
  if (type === "pdf") {
    // Dynamic import @react-pdf/renderer
    const pdfLib = await import("@react-pdf/renderer");
    const { pdf, Document, Page, Text, Image, StyleSheet } =
      pdfLib as typeof import("@react-pdf/renderer");

    const styles = StyleSheet.create({
      page: { flexDirection: "column", padding: 20 },
      section: { margin: 10, fontSize: 14 },
      image: { width: 200, height: 200, marginTop: 10 },
    });

    const MyDocument = (
      <Document>
        <Page size="A4" style={styles.page}>
          <Text style={styles.section}>{text}</Text>
          {images.map((img, i) => (
            <Image key={i} style={styles.image} src={img} />
          ))}
        </Page>
      </Document>
    );

    const blob = await pdf(MyDocument).toBlob();
    saveAs(blob, `${fileName}.pdf`);
  } else {
    // Dynamic import html-docx-js
    const htmlDocx = (await import("html-docx-js/dist/html-docx")).default;

    let htmlContent = `<p>${text}</p>`;
    images.forEach((img) => {
      htmlContent += `<img src="${img}" style="width:200px;height:auto;margin-top:10px;" />`;
    });

    const doc = htmlDocx.asBlob(htmlContent);
    saveAs(doc, `${fileName}.docx`);
  }
};




import { useCallback } from "react";
import type { ExportOptions } from "../services/exportService";

export function useExportFile() {
  const exportFile = useCallback(
    async (options: ExportOptions) => {
      // Dynamically import the heavy service module only when needed
      const { exportFileService } = await import("../services/exportService");
      await exportFileService(options);
    },
    []
  );

  return { exportFile };
}
src/types/html-docx-js.d.ts
ts
Copy
Edit
// Declare module so TypeScript knows about html-docx-js
declare module "html-docx-js/dist/html-docx" {
  export interface HtmlDocx {
    asBlob(html: string, options?: { orientation?: "portrait" | "landscape" }): Blob;
    asDataURI?(html: string): string;
  }
  const htmlDocx: HtmlDocx;
  export default htmlDocx;
}
